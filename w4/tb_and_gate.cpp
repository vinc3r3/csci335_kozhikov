// Include the generated module header.
// Vand_gate.h file is auto-generated by Verilator.
// It is the output of Verilator, i.e. the translation
// from Verilog to C++.
#include "Vand_gate.h"
#include <iostream>

#include "verilated_vcd_c.h"

// Include Verilator library.
#include "verilated.h"


int main(int argc, char **argv)
{

    Verilated::commandArgs(argc, argv);   // Initialize Verilator.
    Vand_gate* and_gate = new Vand_gate;  // Create an instance of the AND gate module.
	
	Verilated::traceEverOn(true); // Enable waveform tracing. 
	VerilatedVcdC* vcd_trace = new VerilatedVcdC;
	and_gate->trace(vcd_trace, 99); // Trace 99 levels of hierarchy. 
	vcd_trace->open("and_gate_trace.vcd"); // Open the VCD file.


    // Apply test cases.
    and_gate->a = 0; and_gate->b = 0;
    and_gate->eval();   // Evaluate the model.
	vcd_trace->dump(10);
    std::cout << "a=0, b=0 -> y=" << (int)and_gate->y << std::endl;


    and_gate->a = 0; and_gate->b = 1;
    and_gate->eval();
	vcd_trace->dump(10);
    std::cout << "a=0, b=1 -> y=" << (int)and_gate->y << std::endl;


    and_gate->a = 1; and_gate->b = 0;
    and_gate->eval();
	vcd_trace->dump(10);
    std::cout << "a=1, b=0 -> y=" << (int)and_gate->y << std::endl;

    and_gate->a = 1; and_gate->b = 1;
    and_gate->eval();
	vcd_trace->dump(10);
    std::cout << "a=1, b=1 -> y=" << (int)and_gate->y << std::endl;
    delete and_gate;  // Free memory.
	delete vcd_trace;
	vcd_trace->close();
    return 0;
}
